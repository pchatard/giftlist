{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"UUID": {
				"type": "string",
				"format": "uuid",
				"description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
				"pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
			},
			"ListIdDTO": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateErrorJSON": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISOString": {
				"type": "string",
				"format": "isostring",
				"description": "Stringified email.\nSee [ISO Date String Regex](https://www.myintervals.com/blog/2009/05/20/iso-8601-date-validation-that-doesnt-suck/) and [RFC 3339](https://tools.ietf.org/html/rfc3339)",
				"pattern": "([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?"
			},
			"Pick_List.Exclude_keyofList.id-or-sharingCode-or-gifts-or-hasBookedGifts-or-owners-or-grantedUsers-or-ownersDTO-or-grantedUsersDTO-or-createdDate-or-updatedDate__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"closureDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ISOString"
							}
						],
						"nullable": true
					},
					"ownersIds": {
						"items": {
							"$ref": "#/components/schemas/UUID"
						},
						"type": "array"
					},
					"isOwner": {
						"type": "boolean"
					},
					"isShared": {
						"type": "boolean"
					},
					"grantedUsersIds": {
						"items": {
							"$ref": "#/components/schemas/UUID"
						},
						"type": "array"
					}
				},
				"required": [
					"title",
					"ownersIds",
					"isShared"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_List.id-or-sharingCode-or-gifts-or-hasBookedGifts-or-owners-or-grantedUsers-or-ownersDTO-or-grantedUsersDTO-or-createdDate-or-updatedDate_": {
				"$ref": "#/components/schemas/Pick_List.Exclude_keyofList.id-or-sharingCode-or-gifts-or-hasBookedGifts-or-owners-or-grantedUsers-or-ownersDTO-or-grantedUsersDTO-or-createdDate-or-updatedDate__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateListDTO": {
				"$ref": "#/components/schemas/Omit_List.id-or-sharingCode-or-gifts-or-hasBookedGifts-or-owners-or-grantedUsers-or-ownersDTO-or-grantedUsersDTO-or-createdDate-or-updatedDate_"
			},
			"UnauthorizedErrorJSON": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Unauthorized"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_EditListDTO_": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"closureDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ISOString"
							}
						],
						"nullable": true
					},
					"ownersIds": {
						"items": {
							"$ref": "#/components/schemas/UUID"
						},
						"type": "array"
					},
					"isOwner": {
						"type": "boolean"
					},
					"isShared": {
						"type": "boolean"
					},
					"grantedUsersIds": {
						"items": {
							"$ref": "#/components/schemas/UUID"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"UserNameDTO": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"displayName": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"displayName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_List.id-or-description-or-title-or-isShared-or-sharingCode-or-hasBookedGifts-or-closureDate-or-ownersDTO-or-grantedUsersDTO-or-isOwner_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"sharingCode": {
						"$ref": "#/components/schemas/UUID"
					},
					"hasBookedGifts": {
						"type": "boolean"
					},
					"ownersDTO": {
						"items": {
							"$ref": "#/components/schemas/UserNameDTO"
						},
						"type": "array"
					},
					"grantedUsersDTO": {
						"items": {
							"$ref": "#/components/schemas/UserNameDTO"
						},
						"type": "array"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"closureDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ISOString"
							}
						],
						"nullable": true
					},
					"isOwner": {
						"type": "boolean"
					},
					"isShared": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"sharingCode",
					"title",
					"isShared"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ListDTO": {
				"$ref": "#/components/schemas/Pick_List.id-or-description-or-title-or-isShared-or-sharingCode-or-hasBookedGifts-or-closureDate-or-ownersDTO-or-grantedUsersDTO-or-isOwner_"
			},
			"SelectKindList": {
				"description": "List Selection Kind",
				"enum": [
					"all",
					"owned",
					"granted"
				],
				"type": "string"
			},
			"email": {
				"type": "string",
				"format": "email",
				"description": "Stringified email.\nSee [Email Regex](https://emailregex.com/) and [RFC 5322](https://tools.ietf.org/html/rfc5322)",
				"pattern": "(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
			},
			"UserIdDTO": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateUserDTO": {
				"properties": {
					"displayName": {
						"type": "string"
					},
					"auth0Id": {
						"type": "string"
					},
					"email": {
						"$ref": "#/components/schemas/email"
					}
				},
				"required": [
					"displayName",
					"auth0Id",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Gift.id-or-title-or-isBooked-or-bookedByDTO-or-isBookedByMe-or-isFavorite-or-isHidden-or-category-or-listId-or-price-or-linkURL-or-brand-or-size-or-color-or-comments_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"title": {
						"type": "string"
					},
					"isBooked": {
						"type": "boolean"
					},
					"bookedByDTO": {
						"items": {
							"$ref": "#/components/schemas/UserNameDTO"
						},
						"type": "array"
					},
					"isBookedByMe": {
						"type": "boolean"
					},
					"isFavorite": {
						"type": "boolean"
					},
					"isHidden": {
						"type": "boolean"
					},
					"category": {
						"type": "string"
					},
					"listId": {
						"$ref": "#/components/schemas/UUID"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"linkURL": {
						"type": "string"
					},
					"brand": {
						"type": "string"
					},
					"size": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"title",
					"isBooked",
					"bookedByDTO",
					"isFavorite",
					"isHidden",
					"category",
					"listId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"GiftDTO": {
				"$ref": "#/components/schemas/Pick_Gift.id-or-title-or-isBooked-or-bookedByDTO-or-isBookedByMe-or-isFavorite-or-isHidden-or-category-or-listId-or-price-or-linkURL-or-brand-or-size-or-color-or-comments_"
			},
			"UserDTO": {
				"properties": {
					"displayName": {
						"type": "string"
					},
					"bookingsDTO": {
						"items": {
							"$ref": "#/components/schemas/GiftDTO"
						},
						"type": "array"
					},
					"email": {
						"$ref": "#/components/schemas/email"
					}
				},
				"required": [
					"displayName",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_UserDTO_": {
				"properties": {
					"displayName": {
						"type": "string"
					},
					"bookingsDTO": {
						"items": {
							"$ref": "#/components/schemas/GiftDTO"
						},
						"type": "array"
					},
					"email": {
						"$ref": "#/components/schemas/email"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"GiftIdDTO": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateGiftDTO": {
				"properties": {
					"title": {
						"type": "string"
					},
					"isBookedByMe": {
						"type": "boolean"
					},
					"isFavorite": {
						"type": "boolean"
					},
					"isHidden": {
						"type": "boolean"
					},
					"category": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"linkURL": {
						"type": "string"
					},
					"brand": {
						"type": "string"
					},
					"size": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					}
				},
				"required": [
					"title",
					"isFavorite",
					"isHidden",
					"category"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_EditGiftDTO_": {
				"properties": {
					"title": {
						"type": "string"
					},
					"isBooked": {
						"type": "boolean"
					},
					"bookedByDTO": {
						"items": {
							"$ref": "#/components/schemas/UserNameDTO"
						},
						"type": "array"
					},
					"isBookedByMe": {
						"type": "boolean"
					},
					"isFavorite": {
						"type": "boolean"
					},
					"isHidden": {
						"type": "boolean"
					},
					"category": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"linkURL": {
						"type": "string"
					},
					"brand": {
						"type": "string"
					},
					"size": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"GiftDTOForOwner": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"title": {
						"type": "string"
					},
					"isFavorite": {
						"type": "boolean"
					},
					"isHidden": {
						"type": "boolean"
					},
					"category": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"linkURL": {
						"type": "string"
					},
					"brand": {
						"type": "string"
					},
					"size": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"title",
					"isFavorite",
					"isHidden",
					"category"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Giftlist API",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/lists": {
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListIdDTO"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Creates a new list.\nPlease note that user which call the function is added to owners if not anticipated in body call",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list property for entity creation",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateListDTO",
								"description": "list property for entity creation"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ListDTO"
									},
									"type": "array"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Gets all user's lists data.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "flag to select owned or granted lists",
						"in": "query",
						"name": "select",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SelectKindList"
						}
					}
				]
			}
		},
		"/lists/{listId}": {
			"put": {
				"operationId": "Edit",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Edit a list.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				],
				"requestBody": {
					"description": "data to edit a list",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_EditListDTO_",
								"description": "data to edit a list"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner and not granted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Delete a list if user is owner or remove from granted if user is granted.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			},
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListDTO"
								}
							}
						}
					},
					"401": {
						"description": "If user not owner or granted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Sends back a list in the response based on its id.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/share": {
			"put": {
				"operationId": "Share",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Make a list to public.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/unshare": {
			"put": {
				"operationId": "Private",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Make a list private.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/invite/{sharingCode}": {
			"put": {
				"operationId": "AccessFromCode",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ListIdDTO"
										},
										{}
									]
								}
							}
						}
					},
					"401": {
						"description": "User is part of the owners",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Get a list from its sharing code.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the sharing code of the list",
						"in": "path",
						"name": "sharingCode",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/eject": {
			"put": {
				"operationId": "RemoveGrantedUser",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Remove a user from granted users of a list.",
				"tags": [
					"List"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the GUID of the list",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the email of the user",
						"in": "query",
						"name": "userMail",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/email"
						}
					}
				]
			}
		},
		"/users": {
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserIdDTO"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Create a new user during sign up. Even if users are authenticated and\ncreated by Auth0, we manage a user database to store preferences,\nfriends and much more.",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "data to create a user",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserDTO",
								"description": "data to create a user"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets all user's data.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/users/profiles/{userMail}": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDTO"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Gets user's data.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "the email of user",
						"in": "path",
						"name": "userMail",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/email"
						}
					}
				]
			}
		},
		"/users/me": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDTO"
								}
							}
						}
					}
				},
				"description": "Gets logged user's data.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "Edit",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Edit a user.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "data to edit a user",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_UserDTO_",
								"description": "data to edit a user"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": ""
					}
				},
				"description": "Delete logged user.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/lists/{listId}/gifts": {
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GiftIdDTO"
								}
							}
						}
					},
					"401": {
						"description": "If user not owner of list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Creates a new gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				],
				"requestBody": {
					"description": "list property for entity creation",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateGiftDTO",
								"description": "list property for entity creation"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"items": {
												"$ref": "#/components/schemas/GiftDTO"
											},
											"type": "array"
										},
										{
											"items": {
												"$ref": "#/components/schemas/GiftDTOForOwner"
											},
											"type": "array"
										}
									]
								}
							}
						}
					},
					"401": {
						"description": "If user not owner or granted of list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Gets all list's gifts data.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gifts list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}": {
			"put": {
				"operationId": "Edit",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Edit a gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				],
				"requestBody": {
					"description": "data to edit a gift",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_EditGiftDTO_",
								"description": "data to edit a gift"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Delete a gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			},
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Success response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/GiftDTO"
										},
										{
											"$ref": "#/components/schemas/GiftDTOForOwner"
										}
									]
								}
							}
						}
					},
					"401": {
						"description": "If user not owner or granted of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Sends back a gift in the response based on its id.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/hide": {
			"put": {
				"operationId": "Hide",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Mark a gift as hidden.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/unhide": {
			"put": {
				"operationId": "Unhide",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Remove \"hidden\" flag of a gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/fav": {
			"put": {
				"operationId": "Favorite",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Mark a gift as favorite.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/unfav": {
			"put": {
				"operationId": "Unfavorite",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user not owner of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Remove \"favorite\" flag of a gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/book": {
			"put": {
				"operationId": "Book",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user is owner or not granted of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Mark a gift as booked.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		},
		"/lists/{listId}/gifts/{giftId}/unbook": {
			"put": {
				"operationId": "Unbook",
				"responses": {
					"204": {
						"description": "Success response"
					},
					"401": {
						"description": "If user is owner or granted of list or gift does not belong to list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorJSON"
								}
							}
						}
					},
					"422": {
						"description": "If body or request param type is violated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					}
				},
				"description": "Remove \"booked\" flag of a gift.",
				"tags": [
					"Gift"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"description": "gift list id",
						"in": "path",
						"name": "listId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					},
					{
						"description": "the GUID of the gift",
						"in": "path",
						"name": "giftId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/UUID"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}